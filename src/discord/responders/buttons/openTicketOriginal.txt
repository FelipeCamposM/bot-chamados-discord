import { Responder, ResponderType } from "#base";
import { createEmbed, createRow } from "@magicyan/discord";
import { ComponentType, REST, Routes, StringSelectMenuBuilder } from "discord.js";
import { ThreadsAPI } from "../../../api/thread.js";

const RESTInstance = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);

function registerTicket(assunto: string, usuario: string) {
    // Implementar a l칩gica de registro de ticket, ou remover se n칚o for necess치rio.
    console.log(`Ticket registrado. Assunto: ${assunto}, Usu치rio: ${usuario}`);
}

new Responder({
    customId: "openTicket",
    type: ResponderType.Button, cache: "cached",
    async run(interaction) {
        await interaction.reply({ ephemeral: true, content: "Ticket aberto com sucesso!" });
    }
});

new Responder({
    customId: "ticketModal",
    type: ResponderType.Modal, cache: "cached",
    async run(interaction) {
        const { fields } = interaction;
        const assunto = fields.getTextInputValue("assunto");
        const usuario = fields.getTextInputValue("usuario");
 
        registerTicket(assunto, usuario);


        
        const row = createRow(
            new StringSelectMenuBuilder({
                customId: "newTicket",
                placeholder: "Escolha uma das op칞칫es do chamado",
                options: [
                    { label: "Problema com Sistema", value: "Problema-Sistema" },
                    { label: "Novo equipamento", value: "Novo-Equipamento" },
                    { label: "Instala칞칚o de Software", value: "Instalacao-Software" },
                    { label: "Outros", value: "Outros" },
                ]
            })
        );
        
        await interaction.reply({ ephemeral: true, content: `Registrado como ${usuario}` });

        const channel = interaction.channel;

        if (!channel) {
            await interaction.followUp({ content: "Erro: O canal n칚o foi encontrado.", ephemeral: true });
            return;
        }

        // Escutar a intera칞칚o da sele칞칚o
        interaction.channel.awaitMessageComponent({ componentType: ComponentType.StringSelect, time: 15000 })
            .then(async selectInteraction => {
                const selectedOption = selectInteraction.values[0];
                const threadTitle = `Chamado: ${selectedOption} 游뚿 Assunto: ${assunto} Usua패rio: ${interaction.user.tag}`; // T칤tulo da thread com base na op칞칚o

                // Criar a thread ap칩s a sele칞칚o
                const thread = await RESTInstance.post(Routes.threads(channel.id), {
                    body: {
                        name: threadTitle,
                        type: 11, // THREAD_PRIVATE (exemplo)
                    }
                });

                await selectInteraction.reply(`Thread criada: ${threadTitle}`);
            })
            .catch(console.error);
    },
    
});
